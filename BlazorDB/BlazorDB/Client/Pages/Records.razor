@page "/record"
@page "/record/{id:int}"
@inject IEmployeeService EmployeeService
@inject IJSRuntime JS


@if (Id == null)
{
    <PageTitle>Update Record</PageTitle>
    <h3>Update Record</h3>
}
else
{
    <PageTitle>Rrcord @employee.Name</PageTitle>
    <h3>Punch Record: @employee.Name</h3>
}
<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <lebal for="Name">姓名</lebal>
        <InputText id="Name" @bind-Value="employee.Name" class="form-control"></InputText>
    </div>
    <div>
        <lebal for="Phone">手機</lebal>
        <InputText id="Phone" @bind-Value="employee.Phone" class="form-control"></InputText>
    </div>
    <div>
        <lebal for="Position">職位</lebal>
        <InputText id="Position" @bind-Value="employee.Position" class="form-control"></InputText>
    </div>
    <div>
        <label>日期</label><br />
        <InputSelect @bind-Value="employee.RecordId" class="form-select">
            @foreach (var record in EmployeeService.Records)
            {
                <option value="@record.Id">@record.Time</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteEmployee">刪除</button>
</EditForm>
<br />
<br />
<button class="btn btn-primary" @onclick="getHello">QR Code</button>
<p>@text</p>
<div id="qrcode"></div>





@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Employee employee = new Employee { Record = new Record() };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save Record" : "Update Record";
        await EmployeeService.GetRecords();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            employee.Record = EmployeeService.Records[0];
            employee.RecordId = employee.Record.Id;
        }
        else
        {
            employee = await EmployeeService.GetSingleEmployee((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await EmployeeService.CreateEmployee(employee);
        }
        else
        {
            await EmployeeService.UpdateEmployee(employee);
        }
    }

    async Task DeleteEmployee()
    {
        await EmployeeService.DeleteEmployee(employee.Id);
    }


    private IJSObjectReference? module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/JavaScriptRun.razor.js");
        }
    }

    private string text { get; set; }

    private async Task getHello()
    {
        text = await module.InvokeAsync<string>("createQRCode");
    }

}
